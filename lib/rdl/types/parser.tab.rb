#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative 'lexer.rex'

module RDL::Type

class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 101)

def initialize()
  @ttrue = RDL::Type::NominalType.new(TrueClass)
  @tfalse = RDL::Type::NominalType.new(FalseClass)
  @tbool = RDL::Type::UnionType.new(@ttrue, @tfalse)
  @ttuple = RDL::Type::NominalType.new(:Tuple)
  @yydebug = true
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    46,    28,    11,    10,    12,    33,    34,    17,    10,    12,
    13,    36,    27,    23,    23,    13,    26,    18,    19,    11,
    10,    12,    39,    17,    10,    12,    23,    13,    41,    18,
    19,    13,     5,    18,    19,    11,    10,    12,    44,    10,
    12,     4,    22,    13,    45,    21,    13,     6,   nil,     5,
    11,    10,    12,    11,    10,    12,   nil,   nil,    13,   nil,
   nil,    13,    11,    10,    12,    11,    10,    12,   nil,   nil,
    13,   nil,   nil,    13,    11,    10,    12,    11,    10,    12,
   nil,   nil,    13,   nil,   nil,    13 ]

racc_action_check = [
    44,    17,    13,    13,    13,    24,    25,    27,    27,    27,
    13,    26,    15,    44,    17,    27,    14,    27,    27,    28,
    28,    28,    32,     5,     5,     5,    11,    28,    35,    28,
    28,     5,    36,     5,     5,    33,    33,    33,    41,    41,
    41,     0,     9,    33,    42,     6,    41,     1,   nil,     0,
     4,     4,     4,    46,    46,    46,   nil,   nil,     4,   nil,
   nil,    46,    18,    18,    18,    19,    19,    19,   nil,   nil,
    18,   nil,   nil,    19,    22,    22,    22,    23,    23,    23,
   nil,   nil,    22,   nil,   nil,    23 ]

racc_action_pointer = [
    36,    47,   nil,   nil,    41,    14,    45,   nil,   nil,    38,
   nil,     5,   nil,    -7,     2,    10,   nil,    -7,    53,    56,
   nil,   nil,    65,    68,     3,   -12,    -4,    -2,    10,   nil,
   nil,   nil,     0,    26,   nil,    25,    19,   nil,   nil,   nil,
   nil,    29,    28,   nil,    -8,   nil,    44,   nil ]

racc_action_default = [
   -26,   -26,    -1,    -2,   -26,    -6,   -26,    -3,   -16,   -19,
   -21,   -22,   -23,   -26,   -26,    -7,    -9,   -22,   -26,   -26,
   -13,    48,   -26,   -26,   -17,   -26,   -14,    -6,   -26,   -11,
   -12,   -20,   -26,   -26,   -25,   -26,   -26,    -8,   -10,   -24,
   -18,   -26,   -26,    -4,   -22,   -15,   -26,    -5 ]

racc_goto_table = [
     7,    14,     2,     3,    35,    38,    25,    31,     1,    24,
   nil,   nil,   nil,   nil,    29,    30,    32,   nil,   nil,    24,
   nil,   nil,   nil,    37,   nil,   nil,    40,   nil,   nil,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    42,   nil,
   nil,   nil,    47 ]

racc_goto_check = [
     4,     5,     2,     3,     6,     8,    10,     9,     1,     4,
   nil,   nil,   nil,   nil,     4,     4,    10,   nil,   nil,     4,
   nil,   nil,   nil,     5,   nil,   nil,    10,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,     2,   nil,
   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     8,     2,     3,    -4,    -4,   -22,   nil,   -23,   -15,
    -7,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    20,   nil,   nil,    15,    16,     8,
   nil,     9 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 25, :_reduce_1,
  1, 25, :_reduce_2,
  2, 27, :_reduce_3,
  6, 26, :_reduce_4,
  8, 26, :_reduce_5,
  0, 29, :_reduce_6,
  1, 29, :_reduce_7,
  3, 29, :_reduce_8,
  1, 31, :_reduce_9,
  3, 31, :_reduce_10,
  2, 32, :_reduce_11,
  2, 32, :_reduce_12,
  1, 32, :_reduce_13,
  0, 30, :_reduce_14,
  3, 30, :_reduce_15,
  1, 28, :_reduce_16,
  1, 34, :_reduce_17,
  3, 34, :_reduce_18,
  1, 33, :_reduce_19,
  3, 33, :_reduce_20,
  1, 35, :_reduce_21,
  1, 35, :_reduce_22,
  1, 35, :_reduce_23,
  4, 35, :_reduce_24,
  3, 35, :_reduce_25 ]

racc_reduce_n = 26

racc_shift_n = 48

racc_token_table = {
  false => 0,
  :error => 1,
  :COMMA => 2,
  :RARROW => 3,
  :OR => 4,
  :DOUBLE_HASH => 5,
  :ASSOC => 6,
  :DOUBLE_COLON => 7,
  :COLON => 8,
  :ID => 9,
  :SYMBOL => 10,
  :SPECIAL_ID => 11,
  :STRING => 12,
  :LPAREN => 13,
  :RPAREN => 14,
  :LBRACE => 15,
  :RBRACE => 16,
  :LBRACKET => 17,
  :RBRACKET => 18,
  :QUERY => 19,
  :STAR => 20,
  :LESS => 21,
  :GREATER => 22,
  :EOF => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COMMA",
  "RARROW",
  "OR",
  "DOUBLE_HASH",
  "ASSOC",
  "DOUBLE_COLON",
  "COLON",
  "ID",
  "SYMBOL",
  "SPECIAL_ID",
  "STRING",
  "LPAREN",
  "RPAREN",
  "LBRACE",
  "RBRACE",
  "LBRACKET",
  "RBRACKET",
  "QUERY",
  "STAR",
  "LESS",
  "GREATER",
  "EOF",
  "$start",
  "entry",
  "method_type",
  "bare_type",
  "type_expr",
  "arg_list",
  "block",
  "arg",
  "base_arg",
  "union_type",
  "type_expr_comma_list",
  "single_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_3(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_4(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], val[5]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], RDL::Type::NamedArgType.new(val[5], val[7])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_8(val, _values, result)
     if val[2] then result = val[2].unshift val[0] else val[0] end 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_10(val, _values, result)
     result = RDL::Type::NamedArgType.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_11(val, _values, result)
     result = RDL::Type::OptionalType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_12(val, _values, result)
     result = RDL::Type::VarargType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_14(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_15(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_17(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_18(val, _values, result)
            result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_19(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_20(val, _values, result)
     result = RDL::Type::UnionType.new val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_21(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_sym) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_22(val, _values, result)
          if val[0] == 'nil' then
        result = RDL::Type::NilType.new
      elsif val[0] =~ /^[a-z_]+\w*\'?/ then
        result = RDL::Type::VarType.new(val[0].to_sym)
      else
        result = RDL::Type::NominalType.new val[0]
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_23(val, _values, result)
          if val[0] == '%any' then
        result = RDL::Type::TopType.new
      elsif val[0] == '%bool' then
        result = @tbool
      else
        fail "Unexpected special type identifier #{val[0]}"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_24(val, _values, result)
          n = RDL::Type::NominalType.new(val[0])
      result = RDL::Type::GenericType.new(n, *val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_25(val, _values, result)
          result = RDL::Type::GenericType.new(@ttuple, *val[1])
    
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


end
