#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative 'lexer.rex'

module RDL::Type

class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 147)

def initialize()
  @yydebug = true
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,    55,    18,    19,    71,    21,    22,    30,    13,    15,
    73,    11,    42,    17,    61,    16,    37,    31,    32,    20,
    80,    18,    19,     7,    21,    22,    30,    13,    15,    37,
    11,    85,    17,    88,    16,     7,    31,    32,    20,    91,
    18,    19,    92,    21,    22,    14,    13,    15,    94,    11,
    95,    17,    98,    16,    20,    78,    18,    19,    61,    21,
    22,    14,    13,    15,     8,    11,     7,    17,    20,    16,
    18,    19,    34,    21,    22,    14,    13,    15,    36,     5,
     6,    17,    20,    16,    18,    19,    37,    21,    22,    14,
    13,    15,     7,    50,    51,    17,    20,    16,    18,    19,
    52,    21,    22,    14,    13,    15,    53,    54,    58,    17,
    20,    16,    18,    19,    62,    21,    22,    14,    13,    15,
    63,    11,    64,    17,    20,    16,    18,    19,    55,    21,
    22,    14,    13,    15,    65,    11,    66,    17,    20,    16,
    18,    19,    67,    21,    22,    38,    13,    15,    68,    11,
    69,    17,    20,    16,    18,    19,    70,    21,    22,    14,
    13,    15,   nil,    11,   nil,    17,    20,    16,    18,    19,
   nil,    21,    22,    14,    13,    15,   nil,   nil,   nil,    17,
    20,    16,    18,    19,   nil,    21,    22,    14,    13,    15,
   nil,    11,   nil,    17,    20,    16,    18,    19,   nil,    21,
    22,    14,    13,    15,   nil,    11,   nil,    17,    20,    16,
    18,    19,   nil,    21,    22,    14,    13,    15,   nil,    11,
   nil,    17,    20,    16,    18,    19,   nil,    21,    22,    14,
    13,    15,   nil,   nil,   nil,    17,    20,    16,    18,    19,
   nil,    21,    22,    14,    13,    15,   nil,    11,   nil,    17,
    46,    16,    44,    45,   nil,   nil,    46,    42,    44,    45,
    47,   nil,   nil,    42,   nil,   nil,    47 ]

racc_action_check = [
     7,    30,     7,     7,    50,     7,     7,     7,     7,     7,
    51,     7,    54,     7,    38,     7,    30,     7,     7,    52,
    60,    52,    52,    61,    52,    52,    52,    52,    52,    38,
    52,    67,    52,    72,    52,    73,    52,    52,    55,    81,
    55,    55,    85,    55,    55,    55,    55,    55,    89,    55,
    91,    55,    93,    55,    62,    55,    62,    62,    95,    62,
    62,    62,    62,    62,     1,    62,     6,    62,    65,    62,
    65,    65,     8,    65,    65,    65,    65,    65,    12,     0,
     0,    65,    66,    65,    66,    66,    14,    66,    66,    66,
    66,    66,     0,    20,    24,    66,    68,    66,    68,    68,
    27,    68,    68,    68,    68,    68,    28,    29,    35,    68,
    31,    68,    31,    31,    39,    31,    31,    31,    31,    31,
    40,    31,    41,    31,     5,    31,     5,     5,    42,     5,
     5,     5,     5,     5,    44,     5,    45,     5,    16,     5,
    16,    16,    46,    16,    16,    16,    16,    16,    47,    16,
    48,    16,    37,    16,    37,    37,    49,    37,    37,    37,
    37,    37,   nil,    37,   nil,    37,    92,    37,    92,    92,
   nil,    92,    92,    92,    92,    92,   nil,   nil,   nil,    92,
    32,    92,    32,    32,   nil,    32,    32,    32,    32,    32,
   nil,    32,   nil,    32,    78,    32,    78,    78,   nil,    78,
    78,    78,    78,    78,   nil,    78,   nil,    78,    11,    78,
    11,    11,   nil,    11,    11,    11,    11,    11,   nil,    11,
   nil,    11,    36,    11,    36,    36,   nil,    36,    36,    36,
    36,    36,   nil,   nil,   nil,    36,    88,    36,    88,    88,
   nil,    88,    88,    88,    88,    88,   nil,    88,   nil,    88,
    69,    88,    69,    69,   nil,   nil,    17,    69,    17,    17,
    69,   nil,   nil,    17,   nil,   nil,    17 ]

racc_action_pointer = [
    74,    64,   nil,   nil,   nil,   117,    48,    -7,    72,   nil,
   nil,   201,    74,   nil,    60,   nil,   131,   249,   nil,   nil,
    79,   nil,   nil,   nil,    75,   nil,   nil,    98,    92,   105,
   -10,   103,   173,   nil,   nil,    89,   215,   145,     3,   112,
    97,    99,   117,   nil,   126,   128,   128,   140,   148,   135,
   -17,   -10,    12,   nil,    -2,    31,   nil,   nil,   nil,   nil,
    -7,     5,    47,   nil,   nil,    61,    75,    10,    89,   243,
   nil,   nil,    30,    17,   nil,   nil,   nil,   nil,   187,   nil,
   nil,    37,   nil,   nil,   nil,    34,   nil,   nil,   229,    27,
   nil,    36,   159,    38,   nil,    47,   nil,   nil,   nil ]

racc_action_default = [
   -54,   -54,    -1,    -2,    -3,   -54,   -54,   -10,   -54,    -4,
   -28,   -54,   -40,   -42,   -43,   -44,   -54,   -32,   -49,   -50,
   -54,   -52,   -53,    -5,   -54,   -11,   -12,   -13,   -16,   -18,
   -43,   -54,   -54,   -23,    99,   -54,   -54,   -54,   -43,   -30,
   -54,   -54,   -54,   -33,   -54,   -54,   -54,   -54,   -38,   -54,
   -54,   -26,   -54,   -17,   -54,   -54,   -21,   -22,   -29,   -41,
   -54,   -54,   -54,   -46,   -47,   -54,   -54,   -54,   -54,   -32,
   -48,   -51,   -54,   -54,   -14,   -15,   -19,   -20,   -54,   -25,
   -45,    -8,   -31,   -34,   -35,   -54,   -37,   -39,   -54,   -54,
   -24,   -54,   -54,    -6,   -27,   -54,    -9,   -36,    -7 ]

racc_goto_table = [
     9,    41,    33,    59,     2,    49,    35,    26,    43,    40,
    23,    25,    77,     3,    72,    24,     4,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    56,    57,   nil,   nil,
    60,   nil,    83,    84,   nil,    86,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
    79,   nil,    75,   nil,    76,    82,    74,    87,   nil,    97,
    43,   nil,   nil,   nil,   nil,    81,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    90,   nil,   nil,    96,    89,   nil,   nil,
   nil,   nil,   nil,    93 ]

racc_goto_check = [
     5,     8,     5,    15,     2,    18,     5,    10,    13,    16,
     2,     9,    14,     3,     7,     6,     4,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     5,     5,   nil,   nil,
    16,   nil,    15,    15,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,
     5,   nil,    10,   nil,    10,    16,     9,    18,   nil,    15,
    13,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,   nil,   nil,     8,     2,   nil,   nil,
   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,    17,     4,    13,    16,    -5,     8,   -37,   -15,     4,
     0,   nil,   nil,    -9,   -43,   -33,    -7,   nil,   -12,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,
   nil,    27,    28,    29,   nil,    10,   nil,    48,   nil,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 30, :_reduce_1,
  1, 30, :_reduce_2,
  1, 30, :_reduce_3,
  2, 32, :_reduce_4,
  2, 33, :_reduce_5,
  6, 31, :_reduce_6,
  7, 31, :_reduce_7,
  3, 37, :_reduce_8,
  5, 37, :_reduce_9,
  0, 35, :_reduce_10,
  1, 35, :_reduce_11,
  1, 35, :_reduce_12,
  1, 38, :_reduce_13,
  3, 38, :_reduce_14,
  3, 38, :_reduce_15,
  1, 40, :_reduce_16,
  2, 40, :_reduce_17,
  1, 39, :_reduce_18,
  3, 39, :_reduce_19,
  3, 42, :_reduce_20,
  2, 41, :_reduce_21,
  2, 41, :_reduce_22,
  1, 41, :_reduce_23,
  2, 43, :_reduce_24,
  1, 43, :_reduce_25,
  0, 36, :_reduce_26,
  3, 36, :_reduce_27,
  1, 34, :_reduce_28,
  3, 34, :_reduce_29,
  1, 45, :_reduce_30,
  3, 45, :_reduce_31,
  0, 46, :_reduce_none,
  1, 46, :_reduce_33,
  3, 46, :_reduce_34,
  3, 46, :_reduce_35,
  5, 46, :_reduce_36,
  3, 46, :_reduce_37,
  1, 47, :_reduce_38,
  3, 47, :_reduce_39,
  1, 44, :_reduce_40,
  3, 44, :_reduce_41,
  1, 48, :_reduce_42,
  1, 48, :_reduce_43,
  1, 48, :_reduce_44,
  4, 48, :_reduce_45,
  3, 48, :_reduce_46,
  3, 48, :_reduce_47,
  3, 48, :_reduce_48,
  1, 48, :_reduce_49,
  1, 48, :_reduce_50,
  3, 48, :_reduce_51,
  1, 48, :_reduce_52,
  1, 48, :_reduce_53 ]

racc_reduce_n = 54

racc_shift_n = 99

racc_token_table = {
  false => 0,
  :error => 1,
  :COMMA => 2,
  :RARROW => 3,
  :OR => 4,
  :HASH_TYPE => 5,
  :HASH_QUERY => 6,
  :CONST_BEGIN => 7,
  :RASSOC => 8,
  :FIXNUM => 9,
  :FLOAT => 10,
  :COLON => 11,
  :DOT => 12,
  :DOTS => 13,
  :ID => 14,
  :SYMBOL => 15,
  :SPECIAL_ID => 16,
  :STRING => 17,
  :LPAREN => 18,
  :RPAREN => 19,
  :LBRACE => 20,
  :RBRACE => 21,
  :LBRACKET => 22,
  :RBRACKET => 23,
  :QUERY => 24,
  :STAR => 25,
  :LESS => 26,
  :GREATER => 27,
  :EOF => 28 }

racc_nt_base = 29

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COMMA",
  "RARROW",
  "OR",
  "HASH_TYPE",
  "HASH_QUERY",
  "CONST_BEGIN",
  "RASSOC",
  "FIXNUM",
  "FLOAT",
  "COLON",
  "DOT",
  "DOTS",
  "ID",
  "SYMBOL",
  "SPECIAL_ID",
  "STRING",
  "LPAREN",
  "RPAREN",
  "LBRACE",
  "RBRACE",
  "LBRACKET",
  "RBRACKET",
  "QUERY",
  "STAR",
  "LESS",
  "GREATER",
  "EOF",
  "$start",
  "entry",
  "method_type",
  "bare_type",
  "query_type",
  "type_expr",
  "arg_list",
  "block",
  "method_sig_list",
  "nonempty_arg_list",
  "named_arg_list",
  "arg",
  "base_arg",
  "named_arg",
  "base_arg_query_only",
  "union_type",
  "type_expr_comma_list",
  "hash_expr",
  "hash_expr_comma_list",
  "single_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 20)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_4(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_5(val, _values, result)
     result = RDL::Query::MethodQuery.new val[1].args, val[1].block, val[1].ret 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_6(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], val[5]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_7(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], RDL::Type::AnnotatedArgType.new(val[6], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_8(val, _values, result)
     result = [val[0].to_sym, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_9(val, _values, result)
     result = [val[0].to_sym, val[2]] + val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_10(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_12(val, _values, result)
          result = [RDL::Type::FiniteHashType.new(Hash[*val[0]])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_13(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_14(val, _values, result)
     result = val[2].unshift val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_15(val, _values, result)
     # named arg list must come last
      result = [val[0], RDL::Type::FiniteHashType.new(Hash[*val[2]])]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_17(val, _values, result)
     result = RDL::Type::AnnotatedArgType.new(val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_19(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_20(val, _values, result)
     result = [val[0].to_sym, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_21(val, _values, result)
     result = RDL::Type::OptionalType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_22(val, _values, result)
     result = RDL::Type::VarargType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_24(val, _values, result)
     result = RDL::Type::OptionalType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_26(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_27(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_28(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_29(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_31(val, _values, result)
     result = [val[0]] + val[2] 
    result
  end
.,.,

# reduce 32 omitted

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_34(val, _values, result)
     result = [val[0].to_i, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_35(val, _values, result)
     result = [val[0].to_f, val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_36(val, _values, result)
        result = [Kernel.const_get(val[0]), val[2]]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_37(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_38(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_39(val, _values, result)
     result = val[0] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_40(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_41(val, _values, result)
     result = RDL::Type::UnionType.new val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_42(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_sym) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_43(val, _values, result)
          if val[0] == 'nil' then
        result = RDL::Type::NilType.new
      elsif val[0] =~ /^[a-z_]+\w*\'?/ then
        result = RDL::Type::VarType.new(val[0].to_sym)
      else
        result = RDL::Type::NominalType.new val[0]
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_44(val, _values, result)
          if $__rdl_special_types.has_key? val[0] then
        result = $__rdl_special_types[val[0]]
      else
        fail "Unexpected special type identifier #{val[0]}"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 117)
  def _reduce_45(val, _values, result)
          n = RDL::Type::NominalType.new(val[0])
      result = RDL::Type::GenericType.new(n, *val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_46(val, _values, result)
          result = RDL::Type::TupleType.new(*val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_47(val, _values, result)
          result = RDL::Type::StructuralType.new(Hash[*val[1]])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_48(val, _values, result)
          result = RDL::Type::FiniteHashType.new(Hash[*val[1]])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_49(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_i) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_50(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_51(val, _values, result)
          result =  RDL::Type::SingletonType.new(Kernel.const_get(val[1]))
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_52(val, _values, result)
     result = RDL::Query::WildQuery.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_53(val, _values, result)
     result = RDL::Query::DotsQuery.new 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


end
