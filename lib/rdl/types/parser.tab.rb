#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative 'lexer.rex'

module RDL::Type

class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 104)

def initialize()
  @yydebug = true
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    17,    15,    16,    36,    12,    11,    13,    32,     9,    31,
     4,    33,    14,    30,    21,    22,    17,    15,    16,     5,
    12,    11,    13,    27,     9,    39,    40,    41,    14,    43,
    21,    22,    17,    15,    16,    26,    12,    11,    13,    45,
     9,    17,    15,    16,    14,    12,    11,    13,    24,     9,
    17,    15,    16,    14,    12,    11,    13,    47,     9,    17,
    15,    16,    14,    12,    11,    13,     5,     9,    17,    15,
    16,    14,    12,    11,    13,     6,     9,    17,    15,    16,
    14,    12,    11,    13,    50,     9,    17,    15,    16,    14,
    12,    11,    13,    51,     9,    17,    15,    16,    14,    12,
    11,    13,   nil,   nil,    17,    15,    16,    14,    12,    11,
    13,   nil,     9,   nil,   nil,   nil,    14 ]

racc_action_check = [
    32,    32,    32,    25,    32,    32,    32,    19,    32,    18,
     0,    20,    32,    17,    32,    32,     5,     5,     5,     0,
     5,     5,     5,    12,     5,    28,    29,    30,     5,    31,
     5,     5,     9,     9,     9,    10,     9,     9,     9,    38,
     9,    47,    47,    47,     9,    47,    47,    47,     6,    47,
    39,    39,    39,    47,    39,    39,    39,    42,    39,     4,
     4,     4,    39,     4,     4,     4,    43,     4,    22,    22,
    22,     4,    22,    22,    22,     1,    22,    27,    27,    27,
    22,    27,    27,    27,    48,    27,    14,    14,    14,    27,
    14,    14,    14,    49,    14,    26,    26,    26,    14,    26,
    26,    26,   nil,   nil,    21,    21,    21,    26,    21,    21,
    21,   nil,    21,   nil,   nil,   nil,    21 ]

racc_action_pointer = [
     5,    75,   nil,   nil,    53,    10,    48,   nil,   nil,    26,
    31,   nil,     1,   nil,    80,   nil,   nil,     3,    -6,     5,
    -2,    98,    62,   nil,   nil,   -12,    89,    71,    23,     7,
    10,    13,    -6,   nil,   nil,   nil,   nil,   nil,    16,    44,
   nil,   nil,    54,    52,   nil,   nil,   nil,    35,    67,    80,
   nil,   nil ]

racc_action_default = [
   -30,   -30,    -1,    -2,   -30,    -6,   -30,    -3,   -16,   -30,
   -20,   -22,   -23,   -24,   -30,   -27,   -28,   -30,   -30,    -7,
    -9,   -30,   -30,   -13,    52,   -30,   -30,   -30,   -18,   -30,
   -30,   -14,    -6,   -10,   -11,   -12,   -17,   -21,   -30,   -30,
   -26,   -29,   -30,   -30,    -8,   -25,   -19,   -30,   -30,    -4,
   -15,    -5 ]

racc_goto_table = [
     7,    23,     2,    18,     3,    25,    29,    42,    37,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,    35,    38,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,
    44,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    49,   nil,    48 ]

racc_goto_check = [
     4,     4,     2,     5,     3,     4,    10,     6,     9,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,     4,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
     5,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,   nil,     2 ]

racc_goto_pointer = [
   nil,     9,     2,     4,    -4,    -2,   -24,   nil,   nil,   -18,
    -8,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    28,   nil,   nil,    19,    20,     8,
   nil,    10 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 26, :_reduce_1,
  1, 26, :_reduce_2,
  2, 28, :_reduce_3,
  6, 27, :_reduce_4,
  7, 27, :_reduce_5,
  0, 30, :_reduce_6,
  1, 30, :_reduce_7,
  3, 30, :_reduce_8,
  1, 32, :_reduce_9,
  2, 32, :_reduce_10,
  2, 33, :_reduce_11,
  2, 33, :_reduce_12,
  1, 33, :_reduce_13,
  0, 31, :_reduce_14,
  3, 31, :_reduce_15,
  1, 29, :_reduce_16,
  3, 29, :_reduce_17,
  1, 35, :_reduce_18,
  3, 35, :_reduce_19,
  1, 34, :_reduce_20,
  3, 34, :_reduce_21,
  1, 36, :_reduce_22,
  1, 36, :_reduce_23,
  1, 36, :_reduce_24,
  4, 36, :_reduce_25,
  3, 36, :_reduce_26,
  1, 36, :_reduce_27,
  1, 36, :_reduce_28,
  3, 36, :_reduce_29 ]

racc_reduce_n = 30

racc_shift_n = 52

racc_token_table = {
  false => 0,
  :error => 1,
  :COMMA => 2,
  :RARROW => 3,
  :OR => 4,
  :DOUBLE_HASH => 5,
  :CONST_BEGIN => 6,
  :FIXNUM => 7,
  :FLOAT => 8,
  :COLON => 9,
  :ID => 10,
  :SYMBOL => 11,
  :SPECIAL_ID => 12,
  :STRING => 13,
  :LPAREN => 14,
  :RPAREN => 15,
  :LBRACE => 16,
  :RBRACE => 17,
  :LBRACKET => 18,
  :RBRACKET => 19,
  :QUERY => 20,
  :STAR => 21,
  :LESS => 22,
  :GREATER => 23,
  :EOF => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COMMA",
  "RARROW",
  "OR",
  "DOUBLE_HASH",
  "CONST_BEGIN",
  "FIXNUM",
  "FLOAT",
  "COLON",
  "ID",
  "SYMBOL",
  "SPECIAL_ID",
  "STRING",
  "LPAREN",
  "RPAREN",
  "LBRACE",
  "RBRACE",
  "LBRACKET",
  "RBRACKET",
  "QUERY",
  "STAR",
  "LESS",
  "GREATER",
  "EOF",
  "$start",
  "entry",
  "method_type",
  "bare_type",
  "type_expr",
  "arg_list",
  "block",
  "arg",
  "base_arg",
  "union_type",
  "type_expr_comma_list",
  "single_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 19)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 23)
  def _reduce_3(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_4(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], val[5]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], RDL::Type::NamedArgType.new(val[6], val[5])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_6(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_8(val, _values, result)
     if val[2] then result = val[2].unshift val[0] else val[0] end 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_10(val, _values, result)
     result = RDL::Type::NamedArgType.new(val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_11(val, _values, result)
     result = RDL::Type::OptionalType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_12(val, _values, result)
     result = RDL::Type::VarargType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_13(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_14(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_15(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_18(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_19(val, _values, result)
            result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_20(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_21(val, _values, result)
     result = RDL::Type::UnionType.new val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_22(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_sym) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_23(val, _values, result)
          if val[0] == 'nil' then
        result = RDL::Type::NilType.new
      elsif val[0] =~ /^[a-z_]+\w*\'?/ then
        result = RDL::Type::VarType.new(val[0].to_sym)
      else
        result = RDL::Type::NominalType.new val[0]
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_24(val, _values, result)
          if $__rdl_special_types.has_key? val[0] then
        result = $__rdl_special_types[val[0]]
      else
        fail "Unexpected special type identifier #{val[0]}"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_25(val, _values, result)
          n = RDL::Type::NominalType.new(val[0])
      result = RDL::Type::GenericType.new(n, *val[2])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_26(val, _values, result)
          result = RDL::Type::TupleType.new(*val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_27(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_i) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_28(val, _values, result)
     result = RDL::Type::SingletonType.new(val[0].to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_29(val, _values, result)
     result = RDL::Type::SingletonType.new(Kernel.const_get val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


end
