require 'rdl'
require 'Date'

class Date
  extend RDL 

  ## Class Methods
  #typesig(:valid_jd?)
  #typesig(:valid_ordinal?)
  #typesig(:valid_civil?)
  # typesig(:valid_date?)
  # typesig(:valid_commercial?)
  # typesig(:julian_leap?)
  # typesig(:gregorian_leap?)
  # typesig(:leap?)
  # typesig(:jd)
  # typesig(:ordinal)
  # typesig(:civil)
  # typesig(:new)
  # typesig(:commercial)
  # typesig(:today)
  # typesig(:_strptime)
  # typesig(:strptime)
  # typesig(:_parse)
  # typesig(:parse)
  # typesig(:_iso8601)
  # typesig(:iso8601)
  # typesig(:_rfc3339)
  # typesig(:rfc3339)
  # typesig(:_xmlschema)
  # typesig(:xmlschema)
  # typesig(:_rfc2822)
  # typesig(:_rfc822)
  # typesig(:rfc2822)
  # typesig(:rfc822)
  # typesig(:_httpdate)
  # typesig(:httpdate)
  # typesig(:_jisx0301)
  # typesig(:jisx0301)
  # typesig(:_load)

  ## Instance Methods
  typesig(:+, "(Numeric or Date) -> Date") 
  # Intersection Type #  
  typesig(:-, "(Numeric) -> Date") 
  typesig(:-, "(Date) -> Rational")
  # End Intersection # 
  typesig(:<<, "(Numeric) -> Date") 
  typesig(:<=>, "(Comparable) -> Fixnum") 
  typesig(:===, "(Comparable) -> %bool") 
  # End Intersection # 
  typesig(:>>, "(Numeric) -> Date") 
  typesig(:ajd, "() -> Rational") 
  typesig(:amjd, "() -> Rational") 
  typesig(:asctime, "() -> String") 
  typesig(:ctime, "() -> String") 
  typesig(:cwday, "() -> Fixnum") 
  typesig(:cweek, "() -> Fixnum") 
  typesig(:cwyear, "() -> Integer") 
  typesig(:day, "() -> Fixnum") 
  typesig(:day_fraction, "() -> Rational") 
  typesig(:downto, "(%any) -> Enumerator") 
  typesig(:england, "() -> Date") 
  typesig(:eql?, "(%any) -> %bool") 
  typesig(:friday?, "() -> %bool") 
  typesig(:gregorian, "() -> Date") 
  typesig(:gregorian?, "() -> %bool") 
  typesig(:hash, "() -> Integer") 
  typesig(:httpdate, "() -> String") 
  typesig(:inspect, "() -> String") 
  typesig(:iso8601, "() -> String") 
  typesig(:italy, "() -> Date") 
  typesig(:jd, "() -> Integer") 
  typesig(:jisx0301, "() -> String") 
  typesig(:julian, "() -> Date") 
  typesig(:julian?, "() -> %bool") 
  typesig(:ld, "() -> Integer") 
  typesig(:leap?, "() -> %bool") 
  typesig(:marshal_dump, "() -> Array") 

  typesig(:mday, "() -> Fixnum") 
  typesig(:mjd, "() -> Integer") 
  typesig(:mon, "() -> Fixnum") 
  typesig(:monday?, "() -> %bool") 
  typesig(:month, "() -> Fixnum") 
  typesig(:new_start, "(?Date) -> Date") 
  typesig(:next, "() -> Date") 
  typesig(:next_day, "(?Fixnum) -> Date") 
  typesig(:next_month, "(?Fixnum) -> Date") 
  typesig(:next_year, "(?Fixnum) -> Date") 
  typesig(:prev_day, "(?Fixnum) -> Date") 
  typesig(:prev_month, "(?Fixnum) -> Date") 
  typesig(:prev_year, "(?Fixnum) -> Date") 
  typesig(:rfc2822, "() -> String") 
  typesig(:rfc3339, "() -> String") 
  typesig(:rfc822, "() -> String") 
  typesig(:saturday?, "() -> %bool") 
  typesig(:start, "() -> Float") 
  typesig(:step, "(Data, ?Fixnum) -> Enumerator") 
  typesig(:step, "(Data, ?Fixnum) {(Date) -> %any} -> Date") 
  typesig(:strftime, "(?String) -> String") 
  typesig(:succ, "() -> Date") 
  typesig(:sunday?, "() -> %bool") 
  typesig(:thursday?, "() -> %bool") 
  typesig(:to_date, "() -> Date") 
  typesig(:to_datetime, "() -> DateTime") 
  typesig(:to_s, "() -> String") 
  typesig(:to_time, "() -> Time") 
  typesig(:tuesday?, "() -> %bool") 
  typesig(:upto, "(Numeric) -> Enumerator") 
  typesig(:wday, "() -> Fixnum") 
  typesig(:wednesday?, "() -> %bool") 
  typesig(:xmlschema, "() -> String") 
  typesig(:yday, "() -> Fixnum") 
  typesig(:year, "() -> Integer") 
end
