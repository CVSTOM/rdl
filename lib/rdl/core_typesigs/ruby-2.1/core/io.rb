require 'rdl'
class IO
  extend RDL 

  RDL.turn_off
  ## Class Methods
  # typesig(:new)
  # typesig(:open)
  # typesig(:sysopen)
  # typesig(:for_fd)
  # typesig(:popen)
  # typesig(:foreach)
  # typesig(:readlines)
  # typesig(:read)
  # typesig(:binread)
  # typesig(:write)
  # typesig(:binwrite)
  # typesig(:select)
  # typesig(:pipe)
  # typesig(:try_convert)
  # typesig(:copy_stream)

  ## Instance Methods
  typesig(:<<, "(%any) -> IO") 
  typesig(:advise, "(Symbol, ?Integer, ?Integer) -> NilClass") 
  typesig(:autoclose=, "(%bool) -> %bool") 
  typesig(:autoclose?, "() -> %bool") 
  typesig(:binmode, "() -> IO") 
  typesig(:binmode?, "() -> %bool") 
  typesig(:close, "() -> NilClass") 
  typesig(:close_on_exec=, "(%bool) -> %bool") 
  typesig(:close_on_exec?, "() -> %bool") 
  typesig(:close_read, "() -> NilClass") 
  typesig(:close_write, "() -> NilClass") 
  typesig(:closed?, "() -> %bool") 
  typesig(:codepoints, "() -> Enumerator") 
  typesig(:codepoints, "() {(Integer) -> %any} -> IO") 
  typesig(:each, "(*%any) -> Enumerator") 
  typesig(:each, "(Integer) {(String) -> %any} -> IO") 
  typesig(:each, "(?String) {(String) -> %any} -> IO") 
  typesig(:each, "(String, Integer) {(String) -> %any} -> IO")
  typesig(:each_line, "(*%any) -> Enumerator") 
  typesig(:each_line, "(Integer) {(String) -> %any} -> IO") 
  typesig(:each_line, "(?String) {(String) -> %any} -> IO")
  typesig(:each_line, "(String, Integer) {(String) -> %any} -> IO")
  typesig(:each_byte, "() {(Fixnum) -> %any} -> IO") 
  typesig(:each_byte, "() -> Enumerator") 
  typesig(:each_char, "() {(Fixnum) -> %any} -> IO") 
  typesig(:each_char, "() -> Enumerator") 
  typesig(:each_codepoint, "() -> Enumerator")
  typesig(:each_codepoint, "() {(Integer) -> %any} -> IO") 
  typesig(:eof, "() -> %bool") 
  typesig(:eof?, "() -> %bool") 
  typesig(:external_encoding, "() -> Encoding") 
  typesig(:fcntl, "(Integer, String or Integer) -> Integer") 
  typesig(:fdatasync, "() -> Fixnum ") 
  typesig(:fileno, "() -> Fixnum") 
  typesig(:flush, "() -> IO") 
  typesig(:fsync, "() -> Fixnum") 
  typesig(:getbyte, "() -> Fixnum") 
  typesig(:getc, "() -> String") 
  typesig(:gets, "(?String) -> String") 
  typesig(:gets, "(Integer) -> String") 
  typesig(:gets, "(String, Integer) -> String") 
  typesig(:inspect, "() -> String") 
  typesig(:internal_encoding, "() -> Encoding") 
  typesig(:ioctl, "(Integer, String or Integer) -> Integer") 
  typesig(:isatty, "() -> %bool") 
  typesig(:lineno, "() -> Integer") 
  typesig(:lineno=, "(Integer) -> Integer") 
  typesig(:lines, "(*%any) -> Enumerator") 
  typesig(:pid, "() -> Integer") 
  typesig(:pos, "() -> Integer") 
  typesig(:pos=, "(Integer) -> Integer")
  typesig(:print, "(*%any) -> NilClass") 
  typesig(:printf, "(*%any) -> NilClass") 
  typesig(:putc, "(%any) -> %any") 
  typesig(:puts, "(*%any) -> NilClass") 
  typesig(:read, "(?Integer) -> String") 
  typesig(:read, "(Integer, String) -> String") 
  typesig(:read_nonblock, "(?Integer) -> String") 
  typesig(:read_nonblock, "(Integer, String) -> String") 
  typesig(:readbyte, "() -> Fixnum") 
  typesig(:readchar, "() -> String") 
  typesig(:readline, "(?String) -> String") 
  typesig(:readline, "(Integer) -> String") 
  typesig(:readline, "(String,Integer) -> String") 
  typesig(:readlines, "(?String) -> Array<String>") 
  typesig(:readlines, "(Integer) -> Array<String>") 
  typesig(:readlines, "(String,Integer) -> Array<String>") 
  typesig(:readpartial, "(Integer, ?String) -> String") 
  typesig(:reopen, "(?Enumerable) -> IO") 
  typesig(:reopen, "(?File) -> File")
  typesig(:reopen, "(String, String) -> IO") 
  typesig(:rewind, "() -> Fixnum") 
  typesig(:seek, "(Integer, ?Fixnum) -> Fixnum") 
  typesig(:set_encoding, "(Encoding or String) -> IO") 
  typesig(:set_encoding, "(Encoding, Encoding, ?Hash) -> IO")
  typesig(:set_encoding, "(String, ?Hash) -> IO")
  typesig(:stat, "() -> Stat") 
  typesig(:sync, "() -> %bool") 
  typesig(:sync=, "(%bool) -> %bool") 
  typesig(:sysread, "(Integer, ?String) -> String") 
  typesig(:sysseek, "(Integer, ?Integer) -> Integer") 
  typesig(:syswrite, "(String) -> Integer") 
  typesig(:tell, "() -> Integer") 
  typesig(:to_i, "() -> Integer") 
  typesig(:to_io, "() -> IO") 
  typesig(:tty?, "() -> %bool") 
  typesig(:ungetbyte, "(Integer or String) -> NilClass") 
  typesig(:ungetc, "(String) -> NilClass") 
  typesig(:write, "(String) -> Fixnum") 
  typesig(:write_nonblock, "(String, ?Hash) -> Integer") 
  
  RDL.turn_on
end
