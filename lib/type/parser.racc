# ######################################################################
#
# DRuby annotation language parser
# Adapted directly from DRuby source file typeAnnotationParser.mly
# Version of GitHub DRuby repo commit 0cda0264851bcdf6b301c3d7f564e9a3ee220e435
#
# ######################################################################

class Parser
  prechigh
    left COMMA
    right RARROW
    left OR
  preclow

  start entry

token DOUBLE_HASH
token OR TUPLE ASSOC DOUBLE_COLON RARROW ID SYMBOL SPECIAL_ID STRING
token LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET
token COMMA QUERY STAR LESS GREATER
token EOF

rule

  entry:
      method_type { result = val[0] }
    | annotation { result = val[0] }

  annotation:
      DOUBLE_HASH type_expr {
        result = val[1]
      }

  method_type:
      LPAREN arg_list RPAREN block RARROW type_expr {
        result = RDL::Type::MethodType.new val[1], val[3], val[5]
      }

  arg_list:
      { result = [] }
    | arg { result = [val[0]] }
    | arg COMMA arg_list { if val[2] then result = val[2].unshift val[0] else val[0] end }
  arg:
      QUERY type_expr { result = RDL::Type::OptionalType.new val[1] }
    | STAR type_expr { result = RDL::Type::VarargType.new val[1] }
    | type_expr { result = val[0] }

  block:
      { result = nil }
    | LBRACE method_type RBRACE { result = val[1] }

  type_expr:
    union_type { result = val[0] }

  type_expr_comma_list:
      type_expr { result = [val[0]] }
    | type_expr COMMA type_expr_comma_list {
        result = [val[0]] + val[2] }

  union_type:
    single_type { result = val[0] }
  | single_type OR union_type { result = RDL::Type::UnionType.new val[0], val[2] }

  single_type:
      SYMBOL { result = RDL::Type::SymbolType.new(val[0]) }
    | ID {
      if val[0] == 'nil' then
        result = RDL::Type::NilType.new
      elsif val[0] =~ /^[a-z_]+\w*\'?/ then
        result = RDL::Type::TypeParameter.new(val[0].to_sym)
      else
        result = RDL::Type::NominalType.new val[0]
      end
    }
    | SPECIAL_ID {
      if val[0] == '%any' then
        result = RDL::Type::TopType.new
      elsif val[0] == '%bool' then
        result = @tbool
      else
        fail "Unexpected special type identifier #{val[0]}"
      end
    }
    | TUPLE LESS type_expr_comma_list GREATER { 
        result = RDL::Type::TupleType.new(*val[2])
    }
    | ID LESS type_expr_comma_list GREATER { 
        n = RDL::Type::NominalType.new(val[0])
        result = RDL::Type::GenericType.new(n, *val[2])
    }


---- header ----

require_relative 'lexer.rex'
require_relative 'types'

module RDL::Type

---- inner ----

def initialize()
  @tbool = RDL::Type::UnionType.new (RDL::Type::NominalType.new TrueClass), (RDL::Type::NominalType.new FalseClass)
  @yydebug = true
end

---- footer ----

end
