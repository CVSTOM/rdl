#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.2
# from lexical definition file "lexer.rex".
#++

require 'racc/parser'
########################################################################
# The latest rexical generator on github supports matching against the 
# end of string. For this file to work correctly, you MUST use the
# latest upstream rexical.
########################################################################


# ######################################################################
# DRuby annotation language parser
# Adapted directly from DRuby source file typeAnnotationLexer.mll
# Version of GitHub DRuby repo commit 0cda0264851bcdf6b301c3d7f564e9a3ee220e45
# ######################################################################
module RDL::Type
class Parser < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader :lineno
  attr_reader :filename

  def scan_setup ; end

  def action &block
    yield
  end

  def scan_str( str )
    scan_evaluate  str
    do_parse
  end

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_evaluate  f.read
    end
  end

  def scan_file( filename )
    load_file  filename
    do_parse
  end

  def next_token
    @rex_tokens.shift
  end

  def scan_evaluate( str )
    scan_setup
    @rex_tokens = []
    @lineno  =  1
    ss = StringScanner.new(str)
    state = nil
    until ss.eos?
      text = ss.peek(1)
      @lineno  +=  1  if text == "\n"
      case state
      when nil
        case
        when (text = ss.scan(/\s/))
           @rex_tokens.push action { }

        when (text = ss.scan(/or/))
           @rex_tokens.push action { [:OR, text] }

        when (text = ss.scan(/=>/))
           @rex_tokens.push action { [:ASSOC, text] }

        when (text = ss.scan(/\::/))
           @rex_tokens.push action { [:DOUBLE_COLON, text] }

        when (text = ss.scan(/->/))
           @rex_tokens.push action { [:RARROW, text] }

        when (text = ss.scan(/\w+/))
           @rex_tokens.push action { [:ID, text] }

        when (text = ss.scan(/:\w+/))
           @rex_tokens.push action { [:SYMBOL, text[1..-1] }

        when (text = ss.scan(/[\?\*]?\w+/))
           @rex_tokens.push action { [:ARG, text] }

        when (text = ss.scan(/%\w+/))
           @rex_tokens.push action { [:NAME, text] }

        when (text = ss.scan(/'[^']*'/))
           @rex_tokens.push action { [:STRING, text.gsub("'", "")] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      else
        raise  ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    end  # until ss
  end  # def scan_evaluate

end # class
