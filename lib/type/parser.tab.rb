#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative 'lexer.rex'
require_relative 'types'

module RDL::Type

class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 80)

def initialize()
  @tbool = RDL::Type::UnionType.new (RDL::Type::NominalType.new TrueClass), (RDL::Type::NominalType.new FalseClass)
  @yydebug = true
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    13,    12,    14,    13,    12,    14,    13,    12,    14,    20,
     7,     8,    16,     7,     8,    13,    12,    14,    13,    12,
    14,    13,    12,    14,    17,    22,    15,     3,    25,     3,
     4,    28 ]

racc_action_check = [
     3,     3,     3,    17,    17,    17,    20,    20,    20,    11,
     3,     3,     5,    17,    17,    25,    25,    25,     8,     8,
     8,     7,     7,     7,     6,    16,     4,     0,    21,    22,
     1,    26 ]

racc_action_pointer = [
    16,    30,   nil,    -7,    26,     0,    22,    14,    11,   nil,
   nil,     5,   nil,   nil,   nil,   nil,    12,    -4,   nil,   nil,
    -1,    25,    18,   nil,   nil,     8,    17,   nil,   nil ]

racc_action_default = [
   -17,   -17,    -1,    -3,   -17,   -17,    -4,   -17,   -17,    -8,
   -11,   -12,   -14,   -15,   -16,    29,    -9,    -3,    -6,    -7,
   -17,   -17,   -17,    -5,   -13,   -17,   -17,    -2,   -10 ]

racc_goto_table = [
     2,    18,    19,     5,    21,     1,    24,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    23,   nil,    27,
   nil,   nil,    26 ]

racc_goto_check = [
     2,     5,     5,     3,     4,     1,     7,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     5,
   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     5,     0,     0,   -12,    -6,   nil,   -14,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     9,     6,    10,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 21, :_reduce_1,
  6, 22, :_reduce_2,
  0, 23, :_reduce_3,
  1, 23, :_reduce_4,
  3, 23, :_reduce_5,
  2, 26, :_reduce_6,
  2, 26, :_reduce_7,
  1, 26, :_reduce_8,
  0, 24, :_reduce_9,
  3, 24, :_reduce_10,
  1, 25, :_reduce_11,
  1, 27, :_reduce_12,
  3, 27, :_reduce_13,
  1, 28, :_reduce_14,
  1, 28, :_reduce_15,
  1, 28, :_reduce_16 ]

racc_reduce_n = 17

racc_shift_n = 29

racc_token_table = {
  false => 0,
  :error => 1,
  :COMMA => 2,
  :RARROW => 3,
  :OR => 4,
  :ASSOC => 5,
  :DOUBLE_COLON => 6,
  :ID => 7,
  :SYMBOL => 8,
  :SPECIAL_ID => 9,
  :STRING => 10,
  :LPAREN => 11,
  :RPAREN => 12,
  :LBRACE => 13,
  :RBRACE => 14,
  :LBRACKET => 15,
  :RBRACKET => 16,
  :QUERY => 17,
  :STAR => 18,
  :EOF => 19 }

racc_nt_base = 20

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "COMMA",
  "RARROW",
  "OR",
  "ASSOC",
  "DOUBLE_COLON",
  "ID",
  "SYMBOL",
  "SPECIAL_ID",
  "STRING",
  "LPAREN",
  "RPAREN",
  "LBRACE",
  "RBRACE",
  "LBRACKET",
  "RBRACKET",
  "QUERY",
  "STAR",
  "EOF",
  "$start",
  "entry",
  "method_type",
  "arg_list",
  "block",
  "type_expr",
  "arg",
  "union_type",
  "single_type" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_2(val, _values, result)
            result = RDL::Type::MethodType.new val[1], val[3], val[5]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_3(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_4(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_5(val, _values, result)
     if val[2] then result = val[2].unshift val[0] else val[0] end 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_6(val, _values, result)
     result = RDL::Type::OptionalType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_7(val, _values, result)
     result = RDL::Type::VarargType.new val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 42)
  def _reduce_9(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_10(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_12(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_13(val, _values, result)
     result = RDL::Type::UnionType.new val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_14(val, _values, result)
     result = RDL::Type::SymbolType.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_15(val, _values, result)
          if val[0] == 'nil' then
        result = RDL::Type::NilType.new
      else
        result = RDL::Type::NominalType.new val[0]
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_16(val, _values, result)
          if val[0] == '%any' then
        result = RDL::Type::TopType.new
      elsif val[0] == '%bool' then
        result = @tbool
      else
        fail "Unexpected special type identifier #{val[0]}"
      end
    
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser


end
