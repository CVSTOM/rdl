rdl_nowrap :Module

type :Module, 'self.constants', '() -> Array<Fixnum>' # also constants(inherited), but undocumented
type :Module, 'self.nesting', '() -> Array<Module>'
type :Module, 'self.new', '() -> Module'
type :Module, 'self.new', '() { (Module) -> %any } -> Module'

type :Module, :<, '(Module other) -> %bool or nil'
type :Module, :<=, '(Module other) -> %bool or nil'
type :Module, :<=>, '(Module other) -> -1 or 0 or 1 or nil'
type :Module, :==, '(%any other) -> %bool'
type :Module, :equal, '(%any other) -> %bool'
type :Module, :eql, '(%any other) -> %bool'
type :Module, :===, '(%any other) -> %bool'
type :Module, :>, '(Module other) -> %bool or nil'
type :Module, :>=, '(Module other) -> %bool or nil'
type :Module, :ancestors, '() -> Array<Module>'
type :Module, :autoload, '(Symbol module, String filename) -> nil'
type :Module, :autoload?, '(Symbol name) -> String or nil'
type :Module, :class_eval, '(String, ?String filename, ?Fixnum lineno) -> %any'
type :Module, :class_exec, '(*%any args) { (*%any args) -> %any } -> %any'
type :Module, :class_variable_defined?, '(Symbol or String) -> %bool'
type :Module, :class_variable_get, '(Symbol or String) -> %any'
type :Module, :class_variable_set, '(Symbol or String, %any) -> %any'
type :Module, :class_variables, '(?%bool inherit) -> Array<Symbol>'
type :Module, :const_defined?, '(Symbol or String, ?%bool inherit) -> %bool'
type :Module, :const_get, '(Symbol or String, ?%bool inherit) -> %any'
type :Module, :const_missing, '(Symbol) -> %any'
type :Module, :const_set, '(Symbol or String, %any) -> %any'
type :Module, :constants, '(?%bool inherit) -> Array<Symbol>'
type :Module, :freeze, '() -> self'
type :Module, :include, '(*Module) -> self'
type :Module, :include?, '(Module) -> %bool'
type :Module, :included_modules, '() -> Array<Module>'
rdl_alias :Module, :inspect, :to_s
type :Module, :instance_method, '(Symbol) -> UnboundMethod'
type :Module, :instance_methods, '(?%bool include_super) -> Array<Symbol>'
type :Module, :method_defined?, '(Symbol or String) -> %bool'
type :Module, :module_eval, '(String, ?String filename, ?Fixnum lineno) -> %any' # matches rdoc example but not type
type :Module, :module_exec, '(*%any args) { (*%any args) -> %any } -> %any'
type :Module, :name, '() -> String'
type :Module, :prepend, '(*Module) -> self'
type :Module, :private_class_method, '(*(Symbol or String)) -> self'
type :Module, :private_constant, '(*Symbol) -> self'
type :Module, :private_instance_methods, '(?%bool include_super) -> Array<Symbol>'
type :Module, :private_method_defined?, '(Symbol or String) -> %bool'
type :Module, :protected_instance_methods, '(?%bool include_super) -> Array<Symbol>'
type :Module, :protected_method_defined?, '(Symbol or String) -> %bool'
type :Module, :public_class_method, '(*(Symbol or String)) -> self'
type :Module, :public_constant, '(*Symbol) -> self'
type :Module, :public_instance_method, '(Symbol) -> UnboundMethod'
type :Module, :public_instance_methods, '(?%bool include_super) -> Array<Symbol>'
type :Module, :public_method_defined?, '(Symbol or String) -> %bool'
type :Module, :remove_class_variable, '(Symbol) -> %any'
type :Module, :singleton_class?, '() -> %bool'
type :Module, :to_s, '() -> String'
# private methods below here
type :Module, :alias_method, '(Symbol new_name, Symbol old_name) -> self'
type :Module, :append_features, '(Module) -> self'
rdl_alias :Module, :attr, :attr_reader
type :Module, :attr_accessor, '(*(Symbol or String)) -> nil'
type :Module, :attr_reader, '(*(Symbol or String)) -> nil'
type :Module, :attr_writer, '(*(Symbol or String)) -> nil'
type :Module, :define_method, '(Symbol, Method) -> Symbol'
type :Module, :define_method, '(Symbol) { (*%any) -> %any } -> Symbol'
type :Module, :extend_object, '(%any) -> %any'
type :Module, :extended, '(Module othermod) -> %any'
type :Module, :included, '(Module othermod) -> %any'
type :Module, :method_added, '(Symbol method_name) -> %any'
type :Module, :method_removed, '(Symbol method_name) -> %any'
type :Module, :module_function, '(*(Symbol or String)) -> self'
type :Module, :prepend_features, '(Module) -> self'
type :Module, :prepended, '(Module othermod) -> %any'
type :Module, :private, '(*(Symbol or String)) -> self'
type :Module, :protected, '(*(Symbol or String)) -> self'
type :Module, :public, '(*(Symbol or String)) -> self'
type :Module, :refine, '(Class) { (%any) -> %any } -> self' # ??
type :Module, :remove_const, '(Symbol) -> %any'
type :Module, :remove_method, '(Symbol or String) -> self'
type :Module, :undef_method, '(Symbol or String) -> self'
type :Module, :using, '(Module) -> self'
