rdl_nowrap :Process

type :Process, 'self.abort', '(?String msg) -> %any'
type :Process, 'self.argv0', '() -> String frozen_string'
type :Process, 'self.clock_getres', '(Symbol or Integer clock_id, ?Symbol unit) -> Float or Integer'
type :Process, 'self.clock_gettime', '(Symbol or Integer clock_id, ?Symbol unit) -> Float or Integer'
type :Process, 'self.daemon', '(?%any nochdir, ?%any noclose) -> 0'
type :Process, 'self.detach', '(Integer pid) -> Thread'
type :Process, 'self.egid', '() -> Integer'
type :Process, 'self.egid=', '(Integer) -> Integer'
type :Process, 'self.euid', '() -> Integer'
type :Process, 'self.euid=', '(Integer) -> Integer user'
  #type :Process, 'self.exec', '(env: ?Hash<String, String>, command:String, args:*String) -> %any' # TODO: env
type :Process, 'self.exit', '(?Integer status) -> %any'
type :Process, 'self.exit!', '(?Integer status) -> %any'
type :Process, 'self.fork', '() -> Integer or nil'
type :Process, 'self.fork', '() { () -> %any } -> Integer or nil'
type :Process, 'self.getpgid', '(Integer pid) -> Integer'
type :Process, 'self.getpgrp', '() -> Integer'
type :Process, 'self.getpriority', '(Integer kind, Integer) -> Integer'
type :Process, 'self.getrlimit', '(Symbol or String or Integer resource) -> [Integer, Integer] cur_max_limit'
type :Process, 'self.getsid', '(?Integer pid) -> Integer'
type :Process, 'self.gid', '() -> Integer'
type :Process, 'self.gid=', '(Integer) -> Integer'
type :Process, 'self.groups', '() -> Array<Integer>'
type :Process, 'self.groups=', '(Array<Integer>) -> Array<Integer>'
type :Process, 'self.initgroups', '(String username, Integer gid) -> Array<Integer>'
type :Process, 'self.kill', '(Integer or Symbol or String signal, *Integer pids) -> Integer'
type :Process, 'self.maxgroups', '() -> Integer'
type :Process, 'self.maxgroups=', '(Integer) -> Integer'
type :Process, 'self.pid', '() -> Integer'
type :Process, 'self.ppid', '() -> Integer'
type :Process, 'self.pgid', '(Integer pid, Integer) -> Integer'
type :Process, 'self.setpriority', '(Integer kind, Integer, Integer priority) -> 0'
type :Process, 'self.setproctitle', '(String) -> String'
type :Process, 'self.setrlimit', '(Symbol or String or Integer resource, Integer cur_limit, ?Integer max_limit) -> nil'
type :Process, 'self.setsid', '() -> Integer'
  #type :Process, 'self.spawn', '(?Hash<String, String> env, String command, *String args) -> %any' # TODO: env
type :Process, 'self.times', '() -> Process::Tms'
type :Process, 'self.uid', '() -> Integer'
type :Process, 'self.uid=', '(Integer user) -> Integer'
type :Process, 'self.wait', '(?Integer pid, ?Integer flags) -> Integer'
type :Process, 'self.wait2', '(?Integer pid, ?Integer flags) -> [Integer, Integer] pid_and_status'
type :Process, 'self.waitall', '() -> Array<[Integer, Integer]>'
type :Process, 'self.waitpid', '(?Integer pid, ?Integer flags) -> Integer'
type :Process, 'self.waitpid2', '(?Integer pid, ?Integer flags) -> [Integer, Integer] pid_and_status'

rdl_nowrap :'Process::GID'
type :'Process::GID', 'self.change_privilege', '(Integer group) -> Integer'
type :'Process::GID', 'self.eid', '() -> Integer'
type :'Process::GID', 'self.from_name', '(String name) -> Integer gid'
type :'Process::GID', 'self.grant_privilege', '(Integer group) -> Integer'
rdl_alias :'Process::GID', 'self.eid=', 'self.grant_privilege'
type :'Process::GID', 'self.re_exchange', '() -> Integer'
type :'Process::GID', 'self.re_exchangeable?', '() -> %bool'
type :'Process::GID', 'self.rid', '() -> Integer'
type :'Process::GID', 'self.sid_available?', '() -> %bool'
type :'Process::GID', 'self.switch', '() -> Integer'
type :'Process::GID', 'self.switch', '() { () -> t } -> t'

rdl_nowrap :'Process::UID'
type :'Process::UID', 'self.change_privilege', '(Integer user) -> Integer'
type :'Process::UID', 'self.eid', '() -> Integer'
type :'Process::UID', 'self.from_name', '(String name) -> Integer uid'
type :'Process::UID', 'self.grant_privilege', '(Integer user) -> Integer'
rdl_alias :'Process::UID', 'self.eid=', 'self.grant_privilege'
type :'Process::UID', 'self.re_exchange', '() -> Integer'
type :'Process::UID', 'self.re_exchangeable?', '() -> %bool'
type :'Process::UID', 'self.rid', '() -> Integer'
type :'Process::UID', 'self.sid_available?', '() -> %bool'
type :'Process::UID', 'self.switch', '() -> Integer'
type :'Process::UID', 'self.switch', '() { () -> t } -> t'

rdl_nowrap :'Process::Status'
 type :'Process::Status', :&, '(Integer num) -> Integer'
 type :'Process::Status', :==, '(%any other) -> %bool'
 type :'Process::Status', :>>, '(Integer num) -> Integer'
 type :'Process::Status', :coredump?, '() -> %bool'
 type :'Process::Status', :exited?, '() -> %bool'
 type :'Process::Status', :exitstatus, '() -> Integer or nil'
 type :'Process::Status', :inspect, '() -> String'
 type :'Process::Status', :pid, '() -> Integer'
 type :'Process::Status', :signaled?, '() -> %bool'
 type :'Process::Status', :stopped?, '() -> %bool'
 type :'Process::Status', :stopsig, '() -> Integer or nil'
 type :'Process::Status', :success?, '() -> %bool'
 type :'Process::Status', :termsig, '() -> Integer or nil'
 type :'Process::Status', :to_i, '() -> Integer'
rdl_alias :'Process::Status', :to_int, :to_i
type :'Process::Status', :to_s, '() -> String'

rdl_nowrap :'Process::Sys'
type :'Process::Sys', 'self.geteid', '() -> Integer'
type :'Process::Sys', 'self.geteuid', '() -> Integer'
type :'Process::Sys', 'self.getgid', '() -> Integer'
type :'Process::Sys', 'self.getuid', '() -> Integer'
type :'Process::Sys', 'self.issetugid', '() -> %bool'
type :'Process::Sys', 'self.setegid', '(Integer group) -> nil'
type :'Process::Sys', 'self.seteuid', '(Integer user) -> nil'
type :'Process::Sys', 'self.setgid', '(Integer group) -> nil'
type :'Process::Sys', 'self.setregid', '(Integer rid, Integer eid) -> nil'
type :'Process::Sys', 'self.setresgid', '(Integer rid, Integer eid, Integer sid) -> nil'
type :'Process::Sys', 'self.setresuid', '(Integer rid, Integer eid, Integer sid) -> nil'
type :'Process::Sys', 'self.setreuid', '(Integer rid, Integer eid) -> nil'
type :'Process::Sys', 'self.setrgid', '(Integer group) -> nil'
type :'Process::Sys', 'self.setruid', '(Integer user) -> nil'
type :'Process::Sys', 'self.setuid', '(Integer user) -> nil'

rdl_nowrap :'Process::Waiter'
type :'Process::Waiter', 'pid', '() -> Integer'
