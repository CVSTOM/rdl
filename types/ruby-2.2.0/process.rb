module Process
  type 'self.abort', '(msg: ?String) -> %any'
  type 'self.argv0', '() -> frozen_string: String'
  type 'self.clock_getres', '(clock_id: Symbol or Fixnum, unit: ?Symbol) -> Float or Integer'
  type 'self.clock_gettime', '(clock_id: Symbol or Fixnum, unit: ?Symbol) -> Float or Integer'
  type 'self.daemon', '(nochdir: ?%any, noclose: ?%any) -> 0'
  type 'self.detach', '(pid: Fixnum) -> Thread'
  type 'self.egid', '() -> Fixnum'
  type 'self.egid=', '(Fixnum) -> Fixnum'
  type 'self.euid', '() -> Fixnum'
  type 'self.euid=', '(Fixnum) -> user: Fixnum'
  #  type 'self.exec', '(env: ?Hash<String, String>, command:String, args:*String) -> %any' # TODO: env
  type 'self.exit', '(status: ?Fixnum) -> %any'
  type 'self.exit!', '(status: ?Fixnum) -> %any'
  type 'self.fork', '() -> Fixnum or nil'
  type 'self.fork', '() { () -> %any } -> Fixnum or nil'
  type 'self.getpgid', '(pid: Fixnum) -> Fixnum'
  type 'self.getpgrp', '() -> Fixnum'
  type 'self.getpriority', '(kind: Fixnum, Fixnum) -> Fixnum'
  type 'self.getrlimit', '(resource: Symbol or String or Fixnum) -> cur_max_limit: [Fixnum, Fixnum]'
  type 'self.getsid', '(pid: ?Fixnum) -> Integer'
  type 'self.gid', '() -> Fixnum'
  type 'self.gid=', '(Fixnum) -> Fixnum'
  type 'self.groups', '() -> Array<Fixnum>'
  type 'self.groups=', '(Array<Fixnum>) -> Array<Fixnum>'
  type 'self.initgroups', '(username: String, gid: Fixnum) -> Array<Fixnum>'
  type 'self.kill', '(signal: Fixnum or Symbol or String, pids: *Fixnum) -> Fixnum'
  type 'self.maxgroups', '() -> Fixnum'
  type 'self.maxgroups=', '(Fixnum) -> Fixnum'
  type 'self.pid', '() -> Fixnum'
  type 'self.ppid', '() -> Fixnum'
  type 'self.pgid', '(pid: Fixnum, Fixnum) -> Fixnum'
  type 'self.setpriority', '(kind: Fixnum, Fixnum, priority: Fixnum) -> 0'
  type 'self.setproctitle', '(String) -> String'
  type 'self.setrlimit', '(resource: Symbol or String or Fixnum, cur_limit: Fixnum, max_limit: ?Fixnum) -> nil'
  type 'self.setsid', '() -> Fixnum'
  #  type 'self.spawn', '(env: ?Hash<String, String>, command:String, args:*String) -> %any' # TODO: env
  type 'self.times', '() -> Process::Tms'
  type 'self.uid', '() -> Fixnum'
  type 'self.uid=', '(user: Fixnum) -> Fixnum'
  type 'self.wait', '(pid: ?Fixnum, flags: ?Fixnum) -> Fixnum'
  type 'self.wait2', '(pid: ?Fixnum, flags: ?Fixnum) -> pid_and_status: [Fixnum, Fixnum]'
  type 'self.waitall', '() -> Array<[Fixnum, Fixnum]>'
  type 'self.waitpid', '(pid: ?Fixnum, flags: ?Fixnum) -> Fixnum'
  type 'self.waitpid2', '(pid: ?Fixnum, flags: ?Fixnum) -> pid_and_status: [Fixnum, Fixnum]'

  module GID
    type 'self.change_privilege', '(group: Fixnum) -> Fixnum'
    type 'self.eid', '() -> Fixnum'
    type 'self.from_name', '(name: String) -> gid: Fixnum'
    type 'self.grant_privilege', '(group: Fixnum) -> Fixnum'
    rdl_alias 'self.eid=', 'self.grant_privilege'
    type 'self.re_exchange', '() -> Fixnum'
    type 'self.re_exchangeable?', '() -> %bool'
    type 'self.rid', '() -> Fixnum'
    type 'self.sid_available?', '() -> %bool'
    type 'self.switch', '() -> Fixnum'
    type 'self.switch', '() { () -> t } -> t'
  end

  module UID
    type 'self.change_privilege', '(user: Fixnum) -> Fixnum'
    type 'self.eid', '() -> Fixnum'
    type 'self.from_name', '(name: String) -> uid: Fixnum'
    type 'self.grant_privilege', '(user: Fixnum) -> Fixnum'
    rdl_alias 'self.eid=', 'self.grant_privilege'
    type 'self.re_exchange', '() -> Fixnum'
    type 'self.re_exchangeable?', '() -> %bool'
    type 'self.rid', '() -> Fixnum'
    type 'self.sid_available?', '() -> %bool'
    type 'self.switch', '() -> Fixnum'
    type 'self.switch', '() { () -> t } -> t'
  end

  class Status
    type :&, '(num: Fixnum) -> Fixnum'
    type :==, '(other: %any) -> %bool'
    type :>>, '(num: Fixnum) -> Fixnum'
    type :coredump?, '() -> %bool'
    type :exited?, '() -> %bool'
    type :exitstatus, '() -> Fixnum or nil'
    type :inspect, '() -> String'
    type :pid, '() -> Fixnum'
    type :signaled?, '() -> %bool'
    type :stopped?, '() -> %bool'
    type :stopsig, '() -> Fixnum or nil'
    type :success?, '() -> %bool'
    type :termsig, '() -> Fixnum or nil'
    type :to_i, '() -> Fixnum'
    rdl_alias :to_int, :to_i
    type :to_s, '() -> String'
  end

  module Sys
    type 'self.geteid', '() -> Fixnum'
    type 'self.geteuid', '() -> Fixnum'
    type 'self.getgid', '() -> Fixnum'
    type 'self.getuid', '() -> Fixnum'
    type 'self.issetugid', '() -> %bool'
    type 'self.setegid', '(group: Fixnum) -> nil'
    type 'self.seteuid', '(user: Fixnum) -> nil'
    type 'self.setgid', '(group: Fixnum) -> nil'
    type 'self.setregid', '(rid: Fixnum, eid: Fixnum) -> nil'
    type 'self.setresgid', '(rid: Fixnum, eid: Fixnum, sid: Fixnum) -> nil'
    type 'self.setresuid', '(rid: Fixnum, eid: Fixnum, sid: Fixnum) -> nil'
    type 'self.setreuid', '(rid: Fixnum, eid: Fixnum) -> nil'
    type 'self.setrgid', '(group: Fixnum) -> nil'
    type 'self.setruid', '(user: Fixnum) -> nil'
    type 'self.setuid', '(user: Fixnum) -> nil'
  end

  class Waiter
    type 'pid', '() -> Fixnum'
  end
end